var fs = require('fs');
var express = require('express');
var bodyParser = require('body-parser');
var logger = require('morgan');
var path = require('path');
var program = require('commander');
var uuid = require('node-uuid');

function subdomainMiddle(req, res, next) {
    
    var hostParts = req.hostname.split(".");
    if(hostParts.length < 3 || hostParts[0] == "www") {
        res.locals.subdomain = uuid.v1();
    } else {
        req.url = "/subdomain/" + hostParts[0] + req.url;
        res.locals.subdomain = hostParts[0];
    }

    res.locals.subdomainBase = res.locals.subdomain.split('-')[0];
    res.locals.domain = "http://" + res.locals.subdomain + "." + hostnameRoot(req.hostname);
    res.locals.manifest = res.locals.domain + "/manifest.webapp";
    next();
}

function hostnameRoot(hostname) {
    return hostname.split('.').slice(-2).join('.');
}

var defaultData = {
    'name': 'Test App ({subdomain})',
    'description': 'This app has been automatically generated by testmanifest.com',
    'version': '1.0',
    'icons': {'16': 'http://testmanifest.com/icon-16.png',
              '48': 'http://testmanifest.com/icon-48.png',
              '128': 'http://testmanifest.com/icon-128.png'},
    'install_allowed_from': ['*'],
    'developer': {'name': 'Test Manifest User', 'url': 'http://testmanifest.com'}
};

function sanitizedFilename(type, name) {
    // TODO: sanitize
    return __dirname + "/" + type + "/" + name;
}

function writeFile(type, name, data, callback) {
    return fs.writeFile(sanitizedFilename(type, name), data, callback);
}

var app = express();

// view engine setup
app.set('views', path.join(__dirname, 'views'));
app.set('view engine', 'ejs');

app.use(bodyParser.urlencoded({extended: false}));
app.use(subdomainMiddle);
app.use(logger('dev'));
app.get("/", function(req, res) {
    res.render('index');
});

app.get("/subdomain/:subdomain", function(req, res) {
    res.locals.json = JSON.stringify(defaultData, null, 4);
    res.render('edit');
});

app.post("/subdomain/:subdomain", function(req, res) {
    writeFile('manifests', res.locals.subdomain, req.body.manifest, function(err) {
        if (err) console.log(err);
    });
    res.send(req.body.manifest);
});

app.get("/subdomain/:subdomain/manifest.webapp", function(req, res) {
    res.json(defaultData);
});

program
    .option('-p, --port <port>', 'Bind Port', 3000, parseInt)
    .parse(process.argv);

console.log("Listening on:", program.port);
app.listen(program.port);
